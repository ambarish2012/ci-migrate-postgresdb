'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.undoRenameTypeAttribute = exports.renameTypeAttribute = exports.undoRename = exports.rename = exports.addTypeValue = exports.setTypeAttribute = exports.addTypeAttribute = exports.dropTypeAttribute = exports.create = exports.drop = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var drop = exports.drop = function drop(type_name) {
  return _utils.template`DROP TYPE "${type_name}";`;
};

var create = exports.create = function create(type_shorthands) {
  var _create = function _create(type_name, options) {
    if (_lodash2.default.isArray(options)) {
      return _utils.template`CREATE TYPE "${type_name}" AS ENUM (${options.map(_utils.escapeValue).join(', ')});`;
    }
    var attributes = _lodash2.default.map(options, function (attribute, attribute_name) {
      return _utils.template`"${attribute_name}" ${(0, _utils.applyType)(attribute, type_shorthands).type}`;
    }).join(',\n');
    return _utils.template`CREATE TYPE "${type_name}" AS (\n${attributes}\n);`;
  };
  _create.reverse = drop;
  return _create;
};

var dropTypeAttribute = exports.dropTypeAttribute = function dropTypeAttribute(type_name, attribute_name) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      ifExists = _ref.ifExists;

  return _utils.template`ALTER TYPE "${type_name}" DROP ATTRIBUTE "${attribute_name}"${ifExists ? ' IF EXISTS' : ''};`;
};

var addTypeAttribute = exports.addTypeAttribute = function addTypeAttribute(type_shorthands) {
  var _alterAttributeAdd = function _alterAttributeAdd(type_name, attribute_name, attribute_type) {
    return _utils.template`ALTER TYPE "${type_name}" ADD ATTRIBUTE "${attribute_name}" ${(0, _utils.applyType)(attribute_type, type_shorthands).type};`;
  };
  _alterAttributeAdd.reverse = dropTypeAttribute;
  return _alterAttributeAdd;
};

var setTypeAttribute = exports.setTypeAttribute = function setTypeAttribute(type_shorthands) {
  return function (type_name, attribute_name, attribute_type) {
    return _utils.template`ALTER TYPE "${type_name}" ALTER ATTRIBUTE "${attribute_name}" SET DATA TYPE ${(0, _utils.applyType)(attribute_type, type_shorthands).type};`;
  };
};

var addTypeValue = exports.addTypeValue = function addTypeValue(type_name, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var ifNotExists = options.ifNotExists,
      before = options.before,
      after = options.after;


  if (before && after) {
    throw new Error('"before" and "after" can\'t be specified together');
  }
  var beforeClause = before ? ` BEFORE ${before}` : '';
  var afterClause = after ? ` BEFORE ${after}` : '';

  return _utils.template`ALTER TYPE "${type_name}" ADD VALUE${ifNotExists ? ' IF NOT EXISTS' : ''} ${(0, _utils.escapeValue)(value)}${beforeClause}${afterClause};`;
};

// RENAME
var rename = exports.rename = function rename(type_name, new_type_name) {
  return _utils.template`ALTER TYPE  "${type_name}" RENAME TO "${new_type_name}";`;
};

var undoRename = exports.undoRename = function undoRename(type_name, new_type_name) {
  return rename(new_type_name, type_name);
};

var renameTypeAttribute = exports.renameTypeAttribute = function renameTypeAttribute(type_name, attribute_name, new_attribute_name) {
  return _utils.template`ALTER TYPE "${type_name}" RENAME ATTRIBUTE "${attribute_name}" TO "${new_attribute_name}";`;
};

var undoRenameTypeAttribute = exports.undoRenameTypeAttribute = function undoRenameTypeAttribute(type_name, attribute_name, new_attribute_name) {
  return renameTypeAttribute(type_name, new_attribute_name, attribute_name);
};

rename.reverse = undoRename;
renameTypeAttribute.reverse = undoRenameTypeAttribute;