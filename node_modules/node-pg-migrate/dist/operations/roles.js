'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.undoRename = exports.rename = exports.alter = exports.drop = exports.create = undefined;

var _lodash = require('lodash');

var _utils = require('../utils');

var formatRoleOptions = function formatRoleOptions() {
  var role_options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var options = [];
  options.push(role_options.superuser ? 'SUPERUSER' : 'NOSUPERUSER');
  options.push(role_options.createdb ? 'CREATEDB' : 'NOCREATEDB');
  options.push(role_options.createrole ? 'CREATEROLE' : 'NOCREATEROLE');
  options.push(!role_options.inherit ? 'NOINHERIT' : 'INHERIT');
  options.push(role_options.login ? 'LOGIN' : 'NOLOGIN');
  options.push(role_options.replication ? 'REPLICATION' : 'NOREPLICATION');
  if (role_options.bypassrls !== undefined) {
    options.push(role_options.bypassrls ? 'BYPASSRLS' : 'NOBYPASSRLS');
  }
  if (role_options.limit) {
    options.push(`CONNECTION LIMIT ${Number(role_options.limit)}`);
  }
  if (role_options.password) {
    options.push(`${!role_options.encrypted ? 'UNENCRYPTED' : 'ENCRYPTED'} PASSWORD ${(0, _utils.escapeValue)(role_options.password)}`);
  }
  if (role_options.valid) {
    options.push(`VALID UNTIL ${(0, _utils.escapeValue)(role_options.valid)}`);
  }
  if (role_options.inRole) {
    options.push(`IN ROLE ${(0, _lodash.isArray)(role_options.inRole) ? role_options.inRole.join(',') : role_options.inRole}`);
  }
  if (role_options.role) {
    options.push(`ROLE ${(0, _lodash.isArray)(role_options.role) ? role_options.role.join(',') : role_options.role}`);
  }
  if (role_options.admin) {
    options.push(`IN ROLE ${(0, _lodash.isArray)(role_options.admin) ? role_options.admin.join(',') : role_options.admin}`);
  }

  return options.join(' ');
};

var create = exports.create = function create(role_name) {
  var role_options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var options = formatRoleOptions(role_options);
  return _utils.template`CREATE ROLE "${role_name}"${options ? ` WITH ${options}` : ''};`;
};

var drop = exports.drop = function drop(role_name) {
  return _utils.template`DROP ROLE "${role_name}";`;
};

var alter = exports.alter = function alter(role_name) {
  var role_options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var options = formatRoleOptions(role_options);
  return _utils.template`ALTER ROLE "${role_name}"${options ? ` WITH ${options}` : ''};`;
};

var rename = exports.rename = function rename(old_role_name, new_role_name) {
  return _utils.template`ALTER ROLE "${old_role_name}" RENAME TO "${new_role_name}";`;
};

var undoRename = exports.undoRename = function undoRename(old_role_name, new_role_name) {
  return rename(new_role_name, old_role_name);
};

// setup reverse functions
create.reverse = drop;
rename.reverse = undoRename;