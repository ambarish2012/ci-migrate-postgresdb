'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rename = exports.create = exports.drop = undefined;

var _utils = require('../utils');

var formatParam = function formatParam(type_shorthands) {
  return function (param) {
    var _applyType = (0, _utils.applyType)(param, type_shorthands),
        mode = _applyType.mode,
        name = _applyType.name,
        type = _applyType.type,
        defaultValue = _applyType.default;

    var options = [];
    if (mode) {
      options.push(mode);
    }
    if (name) {
      options.push((0, _utils.schemalize)(name));
    }
    if (type) {
      options.push(type);
    }
    if (defaultValue) {
      options.push(`DEFAULT ${(0, _utils.escapeValue)(defaultValue)}`);
    }
    return options.join(' ');
  };
};

var formatParams = function formatParams() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var type_shorthands = arguments[1];
  return `(${params.map(formatParam(type_shorthands)).join(', ')})`;
};

var drop = exports.drop = function drop(type_shorthands) {
  return function (function_name) {
    var function_params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        ifExists = _ref.ifExists,
        cascade = _ref.cascade;

    return _utils.template`DROP FUNCTION${ifExists ? ' IF EXISTS' : ''} "${function_name}"${formatParams(function_params, type_shorthands)}${cascade ? ' CASCADE' : ''};`;
  };
};

var create = exports.create = function create(type_shorthands) {
  var _create = function _create(function_name) {
    var function_params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var function_options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var definition = arguments[3];
    var replace = function_options.replace,
        _function_options$ret = function_options.returns,
        returns = _function_options$ret === undefined ? 'void' : _function_options$ret,
        _function_options$del = function_options.delimiter,
        delimiter = _function_options$del === undefined ? '$$' : _function_options$del,
        language = function_options.language,
        window = function_options.window,
        _function_options$beh = function_options.behavior,
        behavior = _function_options$beh === undefined ? 'VOLATILE' : _function_options$beh,
        onNull = function_options.onNull,
        _function_options$par = function_options.parallel,
        parallel = _function_options$par === undefined ? 'UNSAFE' : _function_options$par;

    var options = [];
    if (behavior) {
      options.push(behavior);
    }
    if (language) {
      options.push(`LANGUAGE ${language}`);
    } else {
      throw new Error(`Language for function ${function_name} have to be specified`);
    }
    if (window) {
      options.push('WINDOW');
    }
    if (onNull) {
      options.push('RETURNS NULL ON NULL INPUT');
    }
    if (parallel) {
      options.push(`PARALLEL ${parallel}`);
    }

    return _utils.template`CREATE${replace ? ' OR REPLACE' : ''} FUNCTION "${function_name}"${formatParams(function_params, type_shorthands)}
  RETURNS ${returns}
  AS ${delimiter}
${definition}
${delimiter}
  ${options.join('\n  ')};`;
  };

  _create.reverse = drop(type_shorthands);

  return _create;
};

var rename = exports.rename = function rename(type_shorthands) {
  var _rename = function _rename(old_function_name) {
    var function_params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var new_function_name = arguments[2];
    return _utils.template`ALTER FUNCTION "${old_function_name}"${formatParams(function_params, type_shorthands)} RENAME TO "${new_function_name}";`;
  };

  _rename.reverse = function (old_function_name, function_params, new_function_name) {
    return _rename(new_function_name, function_params, old_function_name);
  };

  return _rename;
};